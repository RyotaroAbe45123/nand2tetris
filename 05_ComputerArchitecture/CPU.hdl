// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 計算結果をAレジスタに格納するかどうか
    // dddの最上位ビットが1のとき、destにAが含まれるので、その判断をMuxで実施
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=forward1);
    // アドレスレジスタにA命令を格納するかどうか。最上位ビットが1ならA命令なので、格納する。
    Not(in=instruction[15], out=aInstructionFlag);
    // C命令かつdestにAが含まれる場合も
    And(a=instruction[15], b=instruction[5], out=cInstructionAndAInDest);
    Or(a=aInstructionFlag, b=cInstructionAndAInDest, out=aRegisterLoad);
    ARegister(
        in=forward1, load=aRegisterLoad,
        out=aRegisterOut, out[0..14]=addressM
    );
    // ALUの入力がアドレスレジスタかデータメモリからかを判定
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=yToALU);

    DRegister(in=aluOut, load=instruction[4], out=xToALU);
    ALU(
        x=xToALU, y=yToALU,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOut, out=outM,
        zr=zr, ng=ng
    );
    And(a=instruction[15], b=instruction[3], out=writeM);

    PC(
        in=aRegisterOut,
        load=pcLoadFlag, inc=pcIncFlag, reset=reset,
        out[0..14]=pc
    );

    // jump判定
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    And(a=instruction[2], b=instruction[1], out=out1);
    And(a=instruction[0], b=out1, out=out11);

    And(a=zr, b=instruction[1], out=out2);

    And(a=ng, b=instruction[2], out=out3);

    And(a=notZr, b=notNg, out=out4);
    And(a=instruction[0], b=out4, out=out44);

    Or(a=out11, b=out2, out=out12);
    Or(a=out3, b=out44, out=out34);
    Or(a=out12, b=out34, out=pcLoad);
    And(a=pcLoad, b=instruction[15], out=pcLoadFlag);
    Not(in=pcLoadFlag, out=pcIncFlag);
}