// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zxが1のとき、xを0にする
    Mux16(a=x, b=false, sel=zx, out=zxout);
    // nzが1のとき、xを反転させる
    Not16(in=zxout, out=nxout);
    Mux16(a=zxout, b=nxout, sel=nx, out=zxnxout);
    // zyが1のとき、yを0にする
    Mux16(a=y, b=false, sel=zy, out=zyout);
    // nyが1のとき、yを反転させる
    Not16(in=zyout, out=nyout);
    Mux16(a=zyout, b=nyout, sel=ny, out=zynyout);
    // fが1のとき、x, yを加算する。0のとき、乗算する。
    And16(a=zxnxout, b=zynyout, out=multiply);
    Add16(a=zxnxout, b=zynyout, out=add);
    Mux16(a=multiply, b=add, sel=f, out=fout);
    // noが1のとき、outを反転させる
    Not16(in=fout, out=noout);
    Mux16(a=fout, b=noout, sel=no, out=out,
        out[0]=out0, out[1]=out1, out[2]=out2, out[3]=out3,
        out[4]=out4, out[5]=out5, out[6]=out6, out[7]=out7,
        out[8]=out8, out[9]=out9, out[10]=out10, out[11]=out11,
        out[12]=out12, out[13]=out13, out[14]=out14, out[15]=out15,
        out[15]=ng
    );
    // 16bitの等号比較
    // XNOR16とANDを用いる。XNORは同一の入力に対して1を返す。それを16bit分実行して、最後にそれらをAND8個で統合する。
    // →XNOR16の実装が手間なので、XORを使い回す。異なる入力なら1を返すので、最後の出力が0なら入力は同一
    // →XORに変更したので、ANDもORに変更した。
    // 最後の出力が1なら入力は同一だし、0なら異なる。
    Xor(a=out0, b=false, out=xor0);
    Xor(a=out1, b=false, out=xor1);
    Xor(a=out2, b=false, out=xor2);
    Xor(a=out3, b=false, out=xor3);
    Xor(a=out4, b=false, out=xor4);
    Xor(a=out5, b=false, out=xor5);
    Xor(a=out6, b=false, out=xor6);
    Xor(a=out7, b=false, out=xor7);
    Xor(a=out8, b=false, out=xor8);
    Xor(a=out9, b=false, out=xor9);
    Xor(a=out10, b=false, out=xor10);
    Xor(a=out11, b=false, out=xor11);
    Xor(a=out12, b=false, out=xor12);
    Xor(a=out13, b=false, out=xor13);
    Xor(a=out14, b=false, out=xor14);
    Xor(a=out15, b=false, out=xor15);
    // out0~15が全部0かどうかを判定
    Or(a=xor0, b=xor1, out=or01);
    Or(a=xor2, b=xor3, out=or23);
    Or(a=xor4, b=xor5, out=or45);
    Or(a=xor6, b=xor7, out=or67);
    Or(a=xor8, b=xor9, out=or89);
    Or(a=xor10, b=xor11, out=or1011);
    Or(a=xor12, b=xor13, out=or1213);
    Or(a=xor14, b=xor15, out=or1415);

    Or(a=or01, b=or23, out=or0123);
    Or(a=or45, b=or67, out=or4567);
    Or(a=or89, b=or1011, out=or891011);
    Or(a=or1213, b=or1415, out=or12131415);

    Or(a=or0123, b=or4567, out=or01234567);
    Or(a=or891011, b=or12131415, out=or89101112131415);

    Or(a=or01234567, b=or89101112131415, out=or0123456789101112131415);
    Not(in=or0123456789101112131415, out=zr);
    // 2の補数による比較
    // 最上位ビットが0or1で判定。1ならngも1
    // out[15]=ng
}